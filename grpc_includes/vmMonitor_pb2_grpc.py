# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import vmMonitor_pb2 as vmMonitor__pb2


class vmMonitorStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getVMStatus = channel.unary_unary(
        '/vmMonitor.vmMonitor/getVMStatus',
        request_serializer=vmMonitor__pb2.vmStatusRequest.SerializeToString,
        response_deserializer=vmMonitor__pb2.vmStatus.FromString,
        )
    self.getSparkStatus = channel.unary_unary(
        '/vmMonitor.vmMonitor/getSparkStatus',
        request_serializer=vmMonitor__pb2.sparkStatusRequest.SerializeToString,
        response_deserializer=vmMonitor__pb2.sparkStatus.FromString,
        )


class vmMonitorServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def getVMStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getSparkStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_vmMonitorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getVMStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getVMStatus,
          request_deserializer=vmMonitor__pb2.vmStatusRequest.FromString,
          response_serializer=vmMonitor__pb2.vmStatus.SerializeToString,
      ),
      'getSparkStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getSparkStatus,
          request_deserializer=vmMonitor__pb2.sparkStatusRequest.FromString,
          response_serializer=vmMonitor__pb2.sparkStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'vmMonitor.vmMonitor', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
